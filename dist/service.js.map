{"version":3,"file":"service.js","sources":["../src/service.ts"],"sourcesContent":["// @ts-ignore\nimport { getValue } from '@glimmer/tracking/primitives/cache';\nimport { assert } from '@ember/debug';\nimport { deprecate } from '@ember/debug';\nimport { associateDestroyableChild } from '@ember/destroyable';\n// @ts-ignore\nimport { invokeHelper } from '@ember/helper';\nimport {\n  dependencySatisfies,\n  importSync,\n  isDevelopingApp,\n  isTesting,\n  macroCondition,\n} from '@embroider/macros';\n\nimport { Resource } from './core';\nimport { INTERNAL } from './core/function-based/types';\n\nimport type { InternalFunctionResourceConfig } from './core/function-based/types';\nimport type { ClassResourceConfig, Stage1DecoratorDescriptor } from '[core-types]';\nimport type Owner from '@ember/owner';\n\ndeprecate(\n  `importing from 'ember-resources/service' is deprecated and will be removed in ember-resources@v7. ` +\n    `The exact same code and support is available at https://github.com/universal-ember/reactiveweb. ` +\n    `\\`pnpm add reactiveweb\\` and then \\` import { service } from 'reactiveweb/resource/service';\\`. ` +\n    `See also: https://github.com/NullVoxPopuli/ember-resources/issues/1061`,\n  false,\n  {\n    id: `ember-resources.service`,\n    until: `7.0.0`,\n    for: `ember-resources`,\n    url: `https://reactive.nullvoxpopuli.com/functions/resource_service.service.html`,\n    since: {\n      available: '6.4.4',\n      enabled: '6.4.4',\n    },\n  },\n);\n\nlet getOwner: (context: unknown) => Owner | undefined;\n\n// if (macroCondition(dependencySatisfies('ember-source', '>=4.12.0'))) {\n// In no version of ember where `@ember/owner` tried to be imported did it exist\nif (macroCondition(false)) {\n  // Using 'any' here because importSync can't lookup types correctly\n  getOwner = (importSync('@ember/owner') as any).getOwner;\n} else {\n  // Using 'any' here because importSync can't lookup types correctly\n  getOwner = (importSync('@ember/application') as any).getOwner;\n}\n\n/**\n * Reminder:\n *   the return value of resource() is different from the returned type (for DX reasons).\n *   the return value is actually a type of InternalFunctionResourceConfig\n */\ntype ResourceType = InternalFunctionResourceConfig | typeof Resource;\n\n/**\n * In order for the same cache to be used for all references\n * in an app, this variable needs to be in module scope.\n *\n * When the owner is destroyed, the cache is cleared\n * (because the WeakMap will see that nothing is referencing the key (owner) anymore)\n *\n * @internal\n */\nexport const __secret_service_cache__ = new WeakMap<Owner, Map<ResourceType, any>>();\n\n/**\n * For testing purposes, this allows us to replace a service with a \"mock\".\n */\nconst REPLACEMENTS = new WeakMap<Owner, Map<ResourceType, ResourceType>>();\n\n/**\n * <div class=\"callout note\">\n *\n * This is not a core part of ember-resources, but demonstrates how services *are* an extension of resources.  This utility should be considered a prototype, but this utility is still under the broader library's SemVer policy.\n *\n * A consuming app will not pay for the bytes of this utility unless imported.\n *\n * </div>\n *\n * An alternative to Ember's built in `@service` decorator.\n *\n * This decorator takes a resource and ties the resource's lifeime to the app / owner.\n *\n * The reason a resource is required, as opposed to allowing \"any class\", is that a\n * resource already has implemented the concept of \"teardown\" or \"cleanup\",\n * and native classes do not have this concept.\n *\n * Example:\n *\n * ```js\n * import Component from '@glimmer/component';\n * import { resource } from 'ember-resources';\n * import { service } from 'ember-resources/service';\n *\n * class PlanetsAPI { ... }\n *\n * const Planets = resource(({ on, owner }) => {\n *   let api = new PlanetsAPI(owner); // for further injections\n *\n *   // on cleanup, we want to cancel any pending requests\n *   on.cleanup(() => api.abortAll());\n *\n *   return api;\n * });\n *\n * class Demo extends Component {\n *   @service(Planets) planets;\n * }\n * ```\n *\n * For Stage 1 decorators and typescript, you'll need to manually declare the type:\n * ```ts\n * class Demo extends Component {\n *   @service(Planets) declare planets: Planets;\n * }\n * ```\n */\nexport function service(resource: unknown) {\n  /**\n   * In order for resources to be instantiated this way, we need to copy a little bit of code from\n   * `@use`, as we still need to rely on `invokeHelper`.\n   *\n   * The main difference being that instead of using `this` for the parent to `invokeHelper`,\n   * we use the owner.\n   *\n   * BIG NOTE RELATED TO TYPE SAFETY:\n   *  - the `resource` argument is typed as `unknown` because the user-land types\n   *    are lies so that DX is useful. The actual internal representation of a resource is an object\n   *    with some properties with some hints for type narrowing\n   */\n\n  // Deliberately separate comment so the above dev-comment doesn't make its way to\n  // consumers\n  // PropertyDecorator\n  return function legacyServiceDecorator(\n    _prototype: object,\n    key: string,\n    descriptor?: Stage1DecoratorDescriptor,\n  ) {\n    if (!descriptor) return;\n\n    assert(`@service(...) can only be used with string-keys`, typeof key === 'string');\n\n    assert(\n      `@service(...) may not be used with an initializer. For example, ` +\n        `\\`@service(MyService) property;\\``,\n      !descriptor.initializer,\n    );\n\n    assert(\n      `Expected passed resource to be a valid resource definition.`,\n      typeof resource === 'function' || (typeof resource === 'object' && resource !== null),\n    );\n\n    return {\n      get(this: object) {\n        let owner = getOwner(this);\n\n        assert(\n          `owner was not found on instance of ${this.constructor.name}. ` +\n            `Has it been linked up correctly with setOwner?` +\n            `If this error has occured in a framework-controlled class, something has gone wrong.`,\n          owner,\n        );\n\n        assert(`Resource definition is invalid`, isResourceType(resource));\n\n        if (macroCondition(isTesting() || isDevelopingApp())) {\n          let cachedReplacements = ensureCaches(owner, REPLACEMENTS);\n\n          let replacement = cachedReplacements.get(resource);\n\n          if (replacement) {\n            resource = replacement;\n\n            assert(`Replacement Resource definition is invalid`, isResourceType(resource));\n          }\n        }\n\n        let caches = ensureCaches(owner);\n        let cache = caches.get(resource);\n\n        if (!cache) {\n          if (INTERNAL in resource && 'type' in resource) {\n            assert(\n              `When using resources with @service(...), do not call .from() on class-based resources. ` +\n                `Resources used as services may not take arguments.`,\n              resource.type === 'function-based',\n            );\n\n            cache = invokeHelper(owner, resource);\n            caches.set(resource, cache);\n            associateDestroyableChild(owner, cache);\n          } else if ((resource as any).prototype instanceof Resource) {\n            assert(\n              `The .from() method on a type of Resource has been removed or altered. This is not allowed.`,\n              'from' in resource && resource.from === Resource.from,\n            );\n\n            /**\n             * We do a lot of lying internally to make TypeScript nice for consumers.\n             * But it does mean that we have to cast in our own code.\n             */\n            let { definition } = (resource as typeof Resource).from(\n              () => [],\n            ) as unknown as ClassResourceConfig;\n\n            cache = invokeHelper(owner, definition);\n            caches.set(resource, cache);\n            associateDestroyableChild(owner, cache);\n          }\n        }\n\n        return getValue(cache);\n      },\n    } as unknown as void /* thanks, TS. */;\n  };\n}\n\nfunction ensureCaches(owner: Owner, cache = __secret_service_cache__) {\n  let caches = cache.get(owner);\n\n  if (!caches) {\n    caches = new Map();\n    cache.set(owner, caches);\n  }\n\n  return caches;\n}\n\nfunction isResourceType(resource: unknown): resource is ResourceType {\n  // The internal representation of the passed resource will not match its type.\n  // A resource is always either a class definition, or the custom internal object.\n  // (See the helper managers for details)\n  return typeof resource === 'function' || (typeof resource === 'object' && resource !== null);\n}\n\ninterface RegisterOptions {\n  /**\n   * The original service to replace.\n   */\n  original: unknown;\n  /**\n   * The replacement service to use.\n   */\n  replacement: unknown;\n}\n\n/**\n *\n */\nexport function serviceOverride(owner: Owner, { original, replacement }: RegisterOptions) {\n  if (macroCondition(!isTesting() && !isDevelopingApp())) {\n    throw new Error(\n      '@service is experimental and `serviceOverride` is not available in production builds.',\n    );\n  }\n\n  let caches = ensureCaches(owner);\n\n  assert(`Original Resource definition is invalid`, isResourceType(original));\n  assert(`Replacement Resource definition is invalid`, isResourceType(replacement));\n\n  assert(`Cannot re-register service after it has been accessed.`, !caches.has(original));\n\n  let replacementCache = ensureCaches(owner, REPLACEMENTS);\n\n  replacementCache.set(original, replacement);\n}\n"],"names":["deprecate","id","until","for","url","since","available","enabled","getOwner","macroCondition","importSync","__secret_service_cache__","WeakMap","REPLACEMENTS","service","resource","legacyServiceDecorator","_prototype","key","descriptor","assert","initializer","get","owner","constructor","name","isResourceType","isTesting","isDevelopingApp","cachedReplacements","ensureCaches","replacement","caches","cache","INTERNAL","type","invokeHelper","set","associateDestroyableChild","prototype","Resource","from","definition","getValue","Map","serviceOverride","original","Error","has","replacementCache"],"mappings":"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"}