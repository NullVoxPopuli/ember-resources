{"version":3,"file":"index.js","sources":["../../src/modifier/index.ts"],"sourcesContent":["import { assert } from '@ember/debug';\nimport { deprecate } from '@ember/debug';\n// @ts-expect-error\nimport { setModifierManager } from '@ember/modifier';\n\nimport { resourceFactory } from '../index';\nimport FunctionBasedModifierManager from './manager';\n\nimport type { resource } from '../index';\nimport type { ArgsFor, ElementFor, EmptyObject } from '[core-types]';\nimport type { ModifierLike } from '@glint/template';\n\ndeprecate(\n  `importing from 'ember-resources/modifier' is deprecated and will be removed in ember-resources@v7. ` +\n    `The exact same code and support is available at https://github.com/universal-ember/reactiveweb. ` +\n    `\\`pnpm add reactiveweb\\` and then \\` import { service } from 'reactiveweb/resource/modifier';\\`. ` +\n    `See also: https://github.com/NullVoxPopuli/ember-resources/issues/1061`,\n  false,\n  {\n    id: `ember-resources.modifier`,\n    until: `7.0.0`,\n    for: `ember-resources`,\n    url: `https://reactive.nullvoxpopuli.com/functions/resource_modifier.modifier.html`,\n    since: {\n      available: '6.4.4',\n      enabled: '6.4.4',\n    },\n  },\n);\n\n// Provide a singleton manager.\nconst MANAGER = new FunctionBasedModifierManager();\n\ntype PositionalArgs<S> = S extends { Args?: object } ? ArgsFor<S['Args']>['Positional'] : [];\ntype NamedArgs<S> = S extends { Args?: object }\n  ? ArgsFor<S['Args']>['Named'] extends object\n    ? ArgsFor<S['Args']>['Named']\n    : EmptyObject\n  : EmptyObject;\n\ntype ArgsForFn<S> = S extends { Args?: object }\n  ? ArgsFor<S['Args']>['Named'] extends EmptyObject\n    ? [...PositionalArgs<S>]\n    : [...PositionalArgs<S>, NamedArgs<S>]\n  : [];\n\n/**\n * A resource-based API for building modifiers.\n *\n * You can attach this to an element, and use a `resource` to manage\n * the state, add event listeners, remove event listeners on cleanup, etc.\n *\n * Using resources for modifiers provides a clear and concise API with\n * easy to read concerns.\n *\n *\n * The signature for the modifier here is _different_ from `ember-modifier`, where positional args and named args are grouped together into an array and object respectively.\n\n * This signature for ember-resource's `modifier` follows the [plain function invocation](https://blog.emberjs.com/plain-old-functions-as-helpers/) signature.\n *\n * ```js\n * import { resource } from 'ember-resources';\n * import { modifier } from 'ember-resources/modifier';\n *\n * const wiggle = modifier((element, arg1, arg2, namedArgs) => {\n *     return resource(({ on }) => {\n *         let animation = element.animate([\n *             { transform: `translateX(${arg1}px)` },\n *             { transform: `translateX(-${arg2}px)` },\n *         ], {\n *             duration: 100,\n *             iterations: Infinity,\n *         });\n *\n *         on.cleanup(() => animation.cancel());\n *     });\n * });\n *\n * <template>\n *     <div {{wiggle 2 5 named=\"hello\"}}>hello</div>\n * </template>\n * ```\n *\n */\nexport function modifier<El extends Element, Args extends unknown[] = unknown[]>(\n  fn: (element: El, ...args: Args) => void,\n): ModifierLike<{\n  Element: El;\n  Args: {\n    Named: EmptyObject;\n    Positional: Args;\n  };\n}>;\n\n/**\n * A resource-based API for building modifiers.\n *\n * You can attach this to an element, and use a `resource` to manage\n * the state, add event listeners, remove event listeners on cleanup, etc.\n *\n * Using resources for modifiers provides a clear and concise API with\n * easy to read concerns.\n *\n *\n * The signature for the modifier here is _different_ from `ember-modifier`, where positional args and named args are grouped together into an array and object respectively.\n\n * This signature for ember-resource's `modifier` follows the [plain function invocation](https://blog.emberjs.com/plain-old-functions-as-helpers/) signature.\n *\n * ```js\n * import { resource } from 'ember-resources';\n * import { modifier } from 'ember-resources/modifier';\n *\n * const wiggle = modifier((element, arg1, arg2, namedArgs) => {\n *     return resource(({ on }) => {\n *         let animation = element.animate([\n *             { transform: `translateX(${arg1}px)` },\n *             { transform: `translateX(-${arg2}px)` },\n *         ], {\n *             duration: 100,\n *             iterations: Infinity,\n *         });\n *\n *         on.cleanup(() => animation.cancel());\n *     });\n * });\n *\n * <template>\n *     <div {{wiggle 2 5 named=\"hello\"}}>hello</div>\n * </template>\n * ```\n *\n */\nexport function modifier<S extends { Element?: Element }>(\n  fn: (element: ElementFor<S>, ...args: ArgsForFn<S>) => ReturnType<typeof resource>,\n): ModifierLike<S>;\n/**\n * A resource-based API for building modifiers.\n *\n * You can attach this to an element, and use a `resource` to manage\n * the state, add event listeners, remove event listeners on cleanup, etc.\n *\n * Using resources for modifiers provides a clear and concise API with\n * easy to read concerns.\n *\n *\n * The signature for the modifier here is _different_ from `ember-modifier`, where positional args and named args are grouped together into an array and object respectively.\n\n * This signature for ember-resource's `modifier` follows the [plain function invocation](https://blog.emberjs.com/plain-old-functions-as-helpers/) signature.\n *\n * ```js\n * import { resource } from 'ember-resources';\n * import { modifier } from 'ember-resources/modifier';\n *\n * const wiggle = modifier((element, arg1, arg2, namedArgs) => {\n *     return resource(({ on }) => {\n *         let animation = element.animate([\n *             { transform: `translateX(${arg1}px)` },\n *             { transform: `translateX(-${arg2}px)` },\n *         ], {\n *             duration: 100,\n *             iterations: Infinity,\n *         });\n *\n *         on.cleanup(() => animation.cancel());\n *     });\n * });\n *\n * <template>\n *     <div {{wiggle 2 5 named=\"hello\"}}>hello</div>\n * </template>\n * ```\n *\n */\nexport function modifier<S extends { Args?: object }>(\n  fn: (element: ElementFor<S>, ...args: ArgsForFn<S>) => ReturnType<typeof resource>,\n): ModifierLike<S>;\n/**\n * A resource-based API for building modifiers.\n *\n * You can attach this to an element, and use a `resource` to manage\n * the state, add event listeners, remove event listeners on cleanup, etc.\n *\n * Using resources for modifiers provides a clear and concise API with\n * easy to read concerns.\n *\n *\n * The signature for the modifier here is _different_ from `ember-modifier`, where positional args and named args are grouped together into an array and object respectively.\n\n * This signature for ember-resource's `modifier` follows the [plain function invocation](https://blog.emberjs.com/plain-old-functions-as-helpers/) signature.\n *\n * ```js\n * import { resource } from 'ember-resources';\n * import { modifier } from 'ember-resources/modifier';\n *\n * const wiggle = modifier((element, arg1, arg2, namedArgs) => {\n *     return resource(({ on }) => {\n *         let animation = element.animate([\n *             { transform: `translateX(${arg1}px)` },\n *             { transform: `translateX(-${arg2}px)` },\n *         ], {\n *             duration: 100,\n *             iterations: Infinity,\n *         });\n *\n *         on.cleanup(() => animation.cancel());\n *     });\n * });\n *\n * <template>\n *     <div {{wiggle 2 5 named=\"hello\"}}>hello</div>\n * </template>\n * ```\n *\n */\nexport function modifier<S extends { Element?: Element; Args?: object }>(\n  fn: (element: ElementFor<S>, ...args: ArgsForFn<S>) => ReturnType<typeof resource>,\n): ModifierLike<S>;\n\nexport function modifier(fn: (element: Element, ...args: unknown[]) => void): ModifierLike<{\n  Element: Element;\n  Args: {\n    Named: {};\n    Positional: [];\n  };\n}> {\n  assert(`modifier() must be invoked with a function`, typeof fn === 'function');\n  setModifierManager(() => MANAGER, fn);\n  resourceFactory(fn);\n\n  return fn as unknown as ModifierLike<{\n    Element: Element;\n    Args: {\n      Named: {};\n      Positional: [];\n    };\n  }>;\n}\n\n/**\n * @internal\n */\nexport type FunctionBasedModifierDefinition<S> = (\n  element: ElementFor<S>,\n  positional: PositionalArgs<S>,\n  named: NamedArgs<S>,\n) => void;\n"],"names":["deprecate","id","until","for","url","since","available","enabled","MANAGER","FunctionBasedModifierManager","modifier","fn","assert","setModifierManager","resourceFactory"],"mappings":";;;;;;;;;;;;AAYAA,SAAS,CACN,CAAoG,mGAAA,CAAA,GAClG,CAAiG,gGAAA,CAAA,GACjG,mGAAkG,GAClG,CAAA,sEAAA,CAAuE,EAC1E,KAAK,EACL;AACEC,EAAAA,EAAE,EAAG,CAAyB,wBAAA,CAAA;AAC9BC,EAAAA,KAAK,EAAG,CAAM,KAAA,CAAA;AACdC,EAAAA,GAAG,EAAG,CAAgB,eAAA,CAAA;AACtBC,EAAAA,GAAG,EAAG,CAA6E,4EAAA,CAAA;AACnFC,EAAAA,KAAK,EAAE;AACLC,IAAAA,SAAS,EAAE,OAAO;AAClBC,IAAAA,OAAO,EAAE,OAAA;AACX,GAAA;AACF,CACF,CAAC,CAAA;;AAED;AACA,MAAMC,OAAO,GAAG,IAAIC,4BAA4B,EAAE,CAAA;;AAelkD,EAMxE;AACDC,EAAAA,MAAM,CAAE,CAA2C,0CAAA,CAAA,EAAE,OAAOD,EAAE,KAAK,UAAU,CAAC,CAAA;AAC9EE,EAAAA,kBAAkB,CAAC,MAAML,OAAO,EAAEG,EAAE,CAAC,CAAA;EACrCG,eAAe,CAACH,EAAE,CAAC,CAAA;AAEnB,EAAA,OAAOA,EAAE,CAAA;AAOX,CAAA;;AAEA;AACA;AACA;;;;"}