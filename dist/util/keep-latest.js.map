{"version":3,"file":"keep-latest.js","sources":["../../src/util/keep-latest.ts"],"sourcesContent":["import { deprecate } from '@ember/debug';\n\nimport { resource, resourceFactory } from '../core/function-based';\n\ndeprecate(\n  `importing from 'ember-resources/util/keep-latest' is deprecated and will be removed in ember-resources@v7. ` +\n    `The exact same code and support is available at https://github.com/universal-ember/reactiveweb. ` +\n    `\\`pnpm add reactiveweb\\` and then \\` import { keepLatest } from 'reactiveweb/keep-latest';\\`. ` +\n    `See also: https://github.com/NullVoxPopuli/ember-resources/issues/1061`,\n  false,\n  {\n    id: `ember-resources.util.keepLatest`,\n    until: `7.0.0`,\n    for: `ember-resources`,\n    url: `https://reactive.nullvoxpopuli.com/functions/keep_latest.keepLatest.html`,\n    since: {\n      available: '6.4.4',\n      enabled: '6.4.4',\n    },\n  },\n);\n\nconst isEmpty = (x: undefined | unknown | unknown[]) => {\n  if (Array.isArray(x)) {\n    return x.length === 0;\n  }\n\n  if (typeof x === 'object') {\n    if (x === null) return true;\n\n    return Object.keys(x).length === 0;\n  }\n\n  return x !== 0 && !x;\n};\n\ninterface Options<T = unknown> {\n  /**\n   * A function who's return value, when true, will\n   * keep the latest truthy value as the \"return value\"\n   * (as determined by the `value` option's return value)\n   */\n  when: () => boolean;\n\n  /**\n   * A function who's return value will be used as the value\n   * of this resource.\n   */\n  value: () => T;\n}\n\n/**\n * <div class=\"callout note\">\n *\n * This is not a core part of ember-resources, but is an example utility to demonstrate a concept when authoring your own resources. However, this utility is still under the broader library's SemVer policy.\n *\n * A consuming app will not pay for the bytes of this utility unless imported.\n *\n * </div>\n *\n * A utility decorator for smoothing out changes in upstream data between\n * refreshes / reload.\n *\n * @example\n * when using RemoteData (or some other promise-based \"eventually a value\" resource),\n * the value returned from the API is what's useful to see to users. But if the URL\n * changes, the remote request will start anew, and isLoading becomes true, and the value is falsey until the request finishes. This can result in some flicker\n * until the new request finishes.\n *\n * To smooth that out, we can use [[keepLatest]]\n *\n * ```js\n *  import { RemoteData } from 'ember-resources/util/remote-data';\n *  import { keepLatest } from 'ember-resources/util/keep-latest';\n *\n *  class A {\n *    @use request = RemoteData(() => 'some url');\n *    @use data = keepLatest({\n *      value: () => this.request.value,\n *      when: () => this.request.isLoading,\n *    });\n *\n *    get result() {\n *      // after the initial request, this is always resolved\n *      return this.data;\n *    }\n *  }\n * ```\n */\nexport function keepLatest<Return = unknown>({ when, value: valueFn }: Options<Return>) {\n  return resource(() => {\n    let previous: Return;\n    let initial = true;\n\n    return () => {\n      let value = valueFn();\n\n      if (when()) {\n        /**\n * Initially, if we may as well return the value instead\n * of the \"previous\" value is there is no previous yet.\n *\n * We check against undefined, because that's what\n   `previous` is \"initialized\" to.\n         *\n   And then we never enter this block again, because\n * we will have previous values in future invocations of this\n         * Formula.\n */\n        if (previous === undefined && initial) {\n          initial = false;\n\n          return value;\n        }\n\n        return (previous = isEmpty(value) ? previous : value);\n      }\n\n      return (previous = value);\n    };\n  });\n}\n\nresourceFactory(keepLatest);\n"],"names":["deprecate","id","until","for","url","since","available","enabled","isEmpty","x","Array","isArray","length","Object","keys","keepLatest","when","value","valueFn","resource","previous","initial","undefined","resourceFactory"],"mappings":";;;;AAIAA,SAAS,CACN,CAA4G,2GAAA,CAAA,GAC1G,CAAiG,gGAAA,CAAA,GACjG,gGAA+F,GAC/F,CAAA,sEAAA,CAAuE,EAC1E,KAAK,EACL;AACEC,EAAAA,EAAE,EAAG,CAAgC,+BAAA,CAAA;AACrCC,EAAAA,KAAK,EAAG,CAAM,KAAA,CAAA;AACdC,EAAAA,GAAG,EAAG,CAAgB,eAAA,CAAA;AACtBC,EAAAA,GAAG,EAAG,CAAyE,wEAAA,CAAA;AAC/EC,EAAAA,KAAK,EAAE;AACLC,IAAAA,SAAS,EAAE,OAAO;AAClBC,IAAAA,OAAO,EAAE,OAAA;AACX,GAAA;AACF,CACF,CAAC,CAAA;AAED,MAAMC,OAAO,GAAIC,CAAkC,IAAK;AACtD,EAAA,IAAIC,KAAK,CAACC,OAAO,CAACF,CAAC,CAAC,EAAE;AACpB,IAAA,OAAOA,CAAC,CAACG,MAAM,KAAK,CAAC,CAAA;AACvB,GAAA;AAEA,EAAA,IAAI,OAAOH,CAAC,KAAK,QAAQ,EAAE;AACzB,IAAA,IAAIA,CAAC,KAAK,IAAI,EAAE,OAAO,IAAI,CAAA;IAE3B,OAAOI,MAAM,CAACC,IAAI,CAACL,CAAC,CAAC,CAACG,MAAM,KAAK,CAAC,CAAA;AACpC,GAAA;AAEA,EAAA,OAAOH,CAAC,KAAK,CAAC,IAAI,CAACA,CAAC,CAAA;AACtB,CAAC,CAAA;AAiBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASM,UAAUA,CAAmB;EAAEC,IAAI;AAAEC,EAAAA,KAAK,EAAEC,OAAAA;AAAyB,CAAC,EAAE;EACtF,OAAOC,QAAQ,CAAC,MAAM;AACpB,IAAA,IAAIC,QAAgB,CAAA;IACpB,IAAIC,OAAO,GAAG,IAAI,CAAA;AAElB,IAAA,OAAO,MAAM;AACX,MAAA,IAAIJ,KAAK,GAAGC,OAAO,EAAE,CAAA;MAErB,IAAIF,IAAI,EAAE,EAAE;AACV;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,QAAA,IAAII,QAAQ,KAAKE,SAAS,IAAID,OAAO,EAAE;AACrCA,UAAAA,OAAO,GAAG,KAAK,CAAA;AAEf,UAAA,OAAOJ,KAAK,CAAA;AACd,SAAA;QAEA,OAAQG,QAAQ,GAAGZ,OAAO,CAACS,KAAK,CAAC,GAAGG,QAAQ,GAAGH,KAAK,CAAA;AACtD,OAAA;MAEA,OAAQG,QAAQ,GAAGH,KAAK,CAAA;KACzB,CAAA;AACH,GAAC,CAAC,CAAA;AACJ,CAAA;AAEAM,eAAe,CAACR,UAAU,CAAC;;;;"}