{"version":3,"file":"ember-concurrency.js","sources":["../../src/util/ember-concurrency.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable ember/no-get */\n// typed-ember has not publihsed types for this yet\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { getValue } from '@glimmer/tracking/primitives/cache';\nimport { deprecate } from '@ember/debug';\nimport { assert } from '@ember/debug';\n// typed-ember has not publihsed types for this yet\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { invokeHelper } from '@ember/helper';\nimport { get } from '@ember/object';\n\nimport { Resource } from '../core/class-based';\nimport { DEFAULT_THUNK, normalizeThunk } from '../core/utils';\n\nimport type { Cache } from '../core/types';\n\ndeprecate(\n  `importing from 'ember-resources/util/ember-concurrency' is deprecated and will be removed in ember-resources@v7. ` +\n    `The exact same code and support is available at https://github.com/universal-ember/reactiveweb. ` +\n    `\\`pnpm add reactiveweb\\` and then \\` import { task, trackedTask } from 'reactiveweb/ember-concurrency';\\`. ` +\n    `See also: https://github.com/NullVoxPopuli/ember-resources/issues/1061`,\n  false,\n  {\n    id: `ember-resources.util.trackedTask`,\n    until: `7.0.0`,\n    for: `ember-resources`,\n    url: `https://reactive.nullvoxpopuli.com/functions/ember_concurrency.task.html`,\n    since: {\n      available: '6.4.4',\n      enabled: '6.4.4',\n    },\n  },\n);\n\n/**\n * <div class=\"callout note\">\n *\n * This is not a core part of ember-resources, but is an example utility to demonstrate a concept when authoring your own resources. However, this utility is still under the broader library's SemVer policy.\n *\n * A consuming app will not pay for the bytes of this utility unless imported.\n *\n * </div>\n *\n * uses Resource to make ember-concurrency tasks reactive.\n *\n * -------------------------\n *\n * @note `ember-resources` does not provide or depend on ember-concurrency.\n * If you want to use task, you'll need to add ember-concurrency as a dependency\n * in your project.\n *\n * @example\n *  When `this.id` changes, the task will automatically be re-invoked.\n * ```js\n * import { tracked } from '@glimmer/tracking';\n * import { restartableTask, timeout } from 'ember-concurrency';\n * import { task as trackedTask } from 'ember-resources/util/ember-concurrency';\n *\n * class Demo {\n *   @tracked id = 1;\n *\n *   searchTask = restartableTask(async () => {\n *     await timeout(200);\n *     await fetch('...');\n *     return 'the-value';\n *   })\n *\n *   last = trackedTask(this, this.searchTask, () => [this.id]);\n * }\n * ```\n * ```hbs\n * Available Properties:\n *  {{this.last.value}}\n *  {{this.last.isFinished}}\n *  {{this.last.isRunning}}\n * ```\n *  (and all other properties on a [TaskInstance](https://ember-concurrency.com/api/TaskInstance.html))\n *\n *\n */\nexport function task<\n  Return = unknown,\n  Args extends unknown[] = unknown[],\n  LocalTask extends TaskIsh<Args, Return> = TaskIsh<Args, Return>,\n>(context: object, task: LocalTask, thunk?: () => Args) {\n  assert(`Task does not have a perform method. Is it actually a task?`, 'perform' in task);\n\n  let target = buildUnproxiedTaskResource(context, task, (thunk || DEFAULT_THUNK) as () => Args);\n\n  // TS can't figure out what the proxy is doing\n  return proxyClass(target as any) as never as TaskInstance<Return>;\n}\n\nexport const trackedTask = task;\n\nconst TASK_CACHE = new WeakMap<object, any>();\n\nfunction buildUnproxiedTaskResource<\n  ArgsList extends any[],\n  Return,\n  LocalTask extends TaskIsh<ArgsList, Return> = TaskIsh<ArgsList, Return>,\n>(context: object, task: LocalTask, thunk: () => ArgsList) {\n  type LocalResource = TaskResource<ArgsList, Return, LocalTask>;\n  type Klass = new (...args: unknown[]) => LocalResource;\n\n  let resource: Cache<Return>;\n  let klass: Klass;\n  let existing = TASK_CACHE.get(task);\n\n  if (existing) {\n    klass = existing;\n  } else {\n    klass = class AnonymousTaskRunner extends TaskResource<ArgsList, Return, LocalTask> {\n      [TASK] = task;\n    } as Klass;\n\n    TASK_CACHE.set(task, klass);\n  }\n\n  return {\n    get value(): LocalResource {\n      if (!resource) {\n        resource = invokeHelper(context, klass, () => {\n          return normalizeThunk(thunk);\n        }) as Cache<Return>;\n      }\n\n      return getValue(resource);\n    },\n  };\n}\n\n/**\n * @private\n */\nexport function proxyClass<\n  ArgsList extends any[],\n  Return,\n  LocalTask extends TaskIsh<ArgsList, Return>,\n  Instance extends TaskResource<ArgsList, Return, LocalTask> = TaskResource<\n    ArgsList,\n    Return,\n    LocalTask\n  >,\n>(target: { value: Instance }) {\n  /*\n   * This proxy defaults to returning the underlying data on\n   * the task runner when '.value' is accessed.\n   *\n   * When working with ember-concurrency tasks, users have the expectation\n   * that they'll be able to inspect the status of the tasks, such as\n   * `isRunning`, `isFinished`, etc.\n   *\n   * To support that, we need to proxy to the `currentTask`.\n   *\n   */\n  return new Proxy(target, {\n    get(target, key): unknown {\n      const taskRunner = target.value;\n      const instance = taskRunner.currentTask;\n\n      if (typeof key === 'string') {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        get(taskRunner.currentTask, key);\n      }\n\n      if (key === 'value') {\n        /**\n         * getter than falls back to the previous task's value\n         */\n        return taskRunner.value;\n      }\n\n      /**\n       * If the key is anything other than value, query on the currentTask\n       */\n      const value = Reflect.get(instance as object, key, instance);\n\n      return typeof value === 'function' ? value.bind(instance) : value;\n    },\n    ownKeys(target): (string | symbol)[] {\n      return Reflect.ownKeys(target.value);\n    },\n    getOwnPropertyDescriptor(target, key): PropertyDescriptor | undefined {\n      return Reflect.getOwnPropertyDescriptor(target.value, key);\n    },\n  }) as never as Instance;\n}\n\nexport type TaskReturnType<T> = T extends TaskIsh<any, infer Return> ? Return : unknown;\nexport type TaskArgsType<T> = T extends TaskIsh<infer Args, any> ? Args : unknown[];\n\nexport interface TaskIsh<Args extends any[], Return> {\n  perform: (...args: Args) => TaskInstance<Return>;\n  cancelAll: () => void;\n}\n\n/**\n * @private\n *\n * Need to define this ourselves, because between\n * ember-concurrency 1, 2, -ts, decorators, etc\n * there are 5+ ways the task type is defined\n *\n * https://github.com/machty/ember-concurrency/blob/f53656876748973cf6638f14aab8a5c0776f5bba/addon/index.d.ts#L280\n */\nexport interface TaskInstance<Return = unknown> extends Promise<Return> {\n  readonly value: Return | null;\n  readonly error: unknown;\n  readonly isSuccessful: boolean;\n  readonly isError: boolean;\n  readonly isCanceled: boolean;\n  readonly hasStarted: boolean;\n  readonly isFinished: boolean;\n  readonly isRunning: boolean;\n  readonly isDropped: boolean;\n  cancel(reason?: string): void | Promise<void>;\n}\n\n/**\n * @private\n */\nexport const TASK = Symbol('TASK');\n\n/**\n * @private\n */\nexport class TaskResource<\n  Args extends any[],\n  Return,\n  LocalTask extends TaskIsh<Args, Return>,\n> extends Resource<{\n  positional: Args;\n}> {\n  // Set via useTask\n  declare [TASK]: LocalTask;\n  // Set during setup/update\n  declare currentTask: TaskInstance<Return>;\n  declare lastTask: TaskInstance<Return> | undefined;\n\n  get value() {\n    if (this.currentTask?.isFinished && !this.currentTask.isCanceled) {\n      return this.currentTask.value;\n    }\n\n    return this.lastTask?.value;\n  }\n\n  modify(positional: Args) {\n    if (this.currentTask) {\n      this.lastTask = this.currentTask;\n    }\n\n    this.currentTask = this[TASK].perform(...positional);\n  }\n\n  teardown() {\n    this[TASK].cancelAll();\n  }\n}\n"],"names":["deprecate","id","until","for","url","since","available","enabled","task","context","thunk","assert","target","buildUnproxiedTaskResource","DEFAULT_THUNK","proxyClass","trackedTask","TASK_CACHE","WeakMap","resource","klass","existing","get","AnonymousTaskRunner","TaskResource","constructor","args","_defineProperty","TASK","set","value","invokeHelper","normalizeThunk","getValue","Proxy","key","taskRunner","instance","currentTask","Reflect","bind","ownKeys","getOwnPropertyDescriptor","Symbol","Resource","isFinished","isCanceled","lastTask","modify","positional","perform","teardown","cancelAll"],"mappings":"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"}