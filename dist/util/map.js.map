{"version":3,"file":"map.js","sources":["../../src/util/map.ts"],"sourcesContent":["import { tracked } from '@glimmer/tracking';\nimport { deprecate } from '@ember/debug';\nimport { assert } from '@ember/debug';\n\nimport { Resource } from '../core/class-based';\n\nimport type { Named, Positional } from '../core/types';\n\ndeprecate(\n  `importing from 'ember-resources/util/map' is deprecated and will be removed in ember-resources@v7. ` +\n    `The exact same code and support is available at https://github.com/universal-ember/reactiveweb. ` +\n    `\\`pnpm add reactiveweb\\` and then \\` import { map } from 'reactiveweb/map';\\`. ` +\n    `See also: https://github.com/NullVoxPopuli/ember-resources/issues/1061`,\n  false,\n  {\n    id: `ember-resources.util.map`,\n    until: `7.0.0`,\n    for: `ember-resources`,\n    url: `https://reactive.nullvoxpopuli.com/functions/map.map.html`,\n    since: {\n      available: '6.4.4',\n      enabled: '6.4.4',\n    },\n  },\n);\n\n/**\n * Public API of the return value of the [[map]] resource.\n */\nexport interface MappedArray<Elements extends readonly unknown[], MappedTo> {\n  /**\n   * Array-index access to specific mapped data.\n   *\n   * If the map function hasn't ran yet on the source data, it will be ran, an cached\n   * for subsequent accesses.\n   *\n   * ```js\n   *  class Foo {\n   *    myMappedData = map(this, {\n   *      data: () => [1, 2, 3],\n   *      map: (num) => `hi, ${num}!`\n   *    });\n   *\n   *    get first() {\n   *      return this.myMappedData[0];\n   *    }\n   *  }\n   * ```\n   */\n  [index: number]: MappedTo;\n\n  /**\n   * evaluate and return an array of all mapped items.\n   *\n   * This is useful when you need to do other Array-like operations\n   * on the mapped data, such as filter, or find\n   *\n   * ```js\n   *  class Foo {\n   *    myMappedData = map(this, {\n   *      data: () => [1, 2, 3],\n   *      map: (num) => `hi, ${num}!`\n   *    });\n   *\n   *    get everything() {\n   *      return this.myMappedData.values();\n   *    }\n   *  }\n   * ```\n   */\n  values: () => { [K in keyof Elements]: MappedTo };\n\n  /**\n   * Without evaluating the map function on each element,\n   * provide the total number of elements\n   *\n   * ```js\n   *  class Foo {\n   *    myMappedData = map(this, {\n   *      data: () => [1, 2, 3],\n   *      map: (num) => `hi, ${num}!`\n   *    });\n   *\n   *    get numItems() {\n   *      return this.myMappedData.length;\n   *    }\n   *  }\n   * ```\n   */\n  length: number;\n  // ^ in TS 4.3+, this can change to get length(): number;\n  //   as a funny side-effect of changing this back to just a simple property,\n  //   type-declaration-maps work again\n\n  /**\n   * Iterate over the mapped array, lazily invoking the passed map function\n   * that was passed to [[map]].\n   *\n   * This will always return previously mapped records without re-evaluating\n   * the map function, so the default `{{#each}}` behavior in ember will\n   * be optimized on \"object-identity\". e.g.:\n   *\n   * ```js\n   *  // ...\n   *  myMappedData = map(this, {\n   *    data: () => [1, 2, 3],\n   *    map: (num) => `hi, ${num}!`\n   *  });\n   *  // ...\n   * ```\n   * ```hbs\n   *  {{#each this.myMappedData as |datum|}}\n   *     loop body only invoked for changed entries\n   *     {{datum}}\n   *  {{/each}}\n   * ```\n   *\n   * Iteration in javascript is also provided by this iterator\n   * ```js\n   *  class Foo {\n   *    myMappedData = map(this, {\n   *      data: () => [1, 2, 3],\n   *      map: (num) => `hi, ${num}!`\n   *    });\n   *\n   *    get mapAgain() {\n   *      let results = [];\n   *\n   *      for (let datum of this.myMappedData) {\n   *        results.push(datum);\n   *      }\n   *\n   *      return datum;\n   *    }\n   *  }\n   * ```\n   */\n  [Symbol.iterator](): Iterator<MappedTo>;\n}\n\n/**\n * <div class=\"callout note\">\n *\n * This is not a core part of ember-resources, but is an example utility to demonstrate a concept when authoring your own resources. However, this utility is still under the broader library's SemVer policy.\n *\n * A consuming app will not pay for the bytes of this utility unless imported.\n *\n * </div>\n *\n * Reactivily apply a `map` function to each element in an array,\n * persisting map-results for each object, based on identity.\n *\n * This is useful when you have a large collection of items that\n * need to be transformed into a different shape (adding/removing/modifying data/properties)\n * and you want the transform to be efficient when iterating over that data.\n *\n * A common use case where this `map` resource provides benefits over is\n * ```js\n * class MyClass {\\\n *   @cached\n *   get wrappedRecords() {\n *     return this.records.map(record => new SomeWrapper(record));\n *   }\n * }\n * ```\n *\n * Even though the above is `@cached`, if any tracked data accessed during the evaluation of `wrappedRecords`\n * changes, the entire array.map will re-run, often doing duplicate work for every unchanged item in the array.\n *\n * @return {MappedArray} an object that behaves like an array. This shouldn't be modified directly. Instead, you can freely modify the data returned by the `data` function, which should be tracked in order to benefit from this abstraction.\n *\n * @example\n *\n * ```js\n *  import { map } from 'ember-resources/util/map';\n *\n *  class MyClass {\n *    wrappedRecords = map(this, {\n *      data: () => this.records,\n *      map: (record) => new SomeWrapper(record),\n *    }),\n *  }\n * ```\n */\nexport function map<Elements extends readonly unknown[], MapTo = unknown>(\n  /**\n   * parent destroyable context, usually `this`\n   */\n  destroyable: object,\n  options: {\n    /**\n     * Array of non-primitives to map over\n     *\n     * This can be class instances, plain objects, or anything supported by WeakMap's key\n     */\n    data: () => Elements;\n    /**\n     * How to transform each element from `data`,\n     * similar to if you were to use Array map yourself.\n     *\n     * This function will be called only when needed / on-demand / lazily.\n     * - if iterating over part of the data, map will only be called for the elements observed\n     * - if not iterating, map will only be called for the elements observed.\n     */\n    map: (element: Elements[number]) => MapTo;\n  },\n) {\n  let { data, map } = options;\n\n  // parens required, else ESLint and TypeScript/Glint error here\n  // prettier-ignore\n  let resource = (TrackedArrayMap<Elements[number], MapTo>).from(destroyable, () => {\n    let reified = data();\n\n    return { positional: [reified], named: { map } };\n  });\n\n  /**\n   * This is what allows square-bracket index-access to work.\n   *\n   * Unfortunately this means the returned value is\n   * Proxy -> Proxy -> wrapper object -> *then* the class instance\n   *\n   * Maybe JS has a way to implement array-index access, but I don't know how\n   */\n  return new Proxy(resource, {\n    get(target, property, receiver) {\n      if (typeof property === 'string') {\n        let parsed = parseInt(property, 10);\n\n        if (!isNaN(parsed)) {\n          return target[AT](parsed);\n        }\n      }\n\n      return Reflect.get(target, property, receiver);\n    },\n    // Is there a way to do this without lying to TypeScript?\n  }) as unknown as MappedArray<Elements, MapTo> & { [K in keyof Elements]: MapTo };\n}\n\ntype Args<E = unknown, Result = unknown> = {\n  Positional: [E[] | readonly E[]];\n  Named: {\n    map: (element: E) => Result;\n  };\n};\n\nconst AT = Symbol('__AT__');\n\n/**\n * @private\n */\nexport class TrackedArrayMap<Element = unknown, MappedTo = unknown>\n  extends Resource<Args<Element, MappedTo>>\n  implements MappedArray<Element[], MappedTo>\n{\n  // Tells TS that we can array-index-access\n  [index: number]: MappedTo;\n\n  #map = new WeakMap<Element & object, MappedTo>();\n\n  @tracked private declare _records: (Element & object)[];\n  @tracked private declare _map: (element: Element) => MappedTo;\n\n  modify([data]: Positional<Args<Element, MappedTo>>, { map }: Named<Args<Element, MappedTo>>) {\n    assert(\n      `Every entry in the data passed to \\`map\\` must be an object.`,\n      data.every((datum) => typeof datum === 'object'),\n    );\n    this._records = data as Array<Element & object>;\n    this._map = map;\n  }\n\n  values = () => [...this];\n\n  get length() {\n    return this._records.length;\n  }\n\n  [Symbol.iterator](): Iterator<MappedTo> {\n    let i = 0;\n\n    return {\n      next: () => {\n        if (i >= this.length) {\n          return { done: true, value: null };\n        }\n\n        let value = this[AT](i);\n\n        i++;\n\n        return {\n          value,\n          done: false,\n        };\n      },\n    };\n  }\n\n  /**\n   * @private\n   *\n   * don't conflict with\n   *   https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at\n   */\n  [AT](i: number) {\n    let record = this._records[i];\n\n    assert(\n      `Expected record to exist at index ${i}, but it did not. ` +\n        `The array item is expected to exist, because the map utility resource lazily iterates along the indices of the original array passed as data. ` +\n        `This error could happen if the data array passed to map has been mutated while iterating. ` +\n        `To resolve this error, do not mutate arrays while iteration occurs.`,\n      record,\n    );\n\n    let value = this.#map.get(record);\n\n    if (!value) {\n      value = this._map(record);\n      this.#map.set(record, value);\n    }\n\n    return value;\n  }\n}\n"],"names":["deprecate","id","until","for","url","since","available","enabled","map","destroyable","options","data","resource","TrackedArrayMap","from","reified","positional","named","Proxy","get","target","property","receiver","parsed","parseInt","isNaN","AT","Reflect","Symbol","_class","_map","WeakMap","_Symbol$iterator","iterator","Resource","constructor","args","_classPrivateFieldInitSpec","writable","value","_initializerDefineProperty","_descriptor","_descriptor2","_defineProperty","modify","assert","every","datum","_records","length","i","next","done","record","_classPrivateFieldGet","set","_applyDecoratedDescriptor","prototype","tracked","configurable","enumerable","initializer"],"mappings":"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"}